API: GET Balance/Balances

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;

import org.apache.commons.codec.binary.Base32;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;


public class Request {

	 public static void main(String[] args) throws ClientProtocolException, IOException   {
	
		   String publicKey = "";
       String secretKey = "";
       String baseAddress = "https://api.gatecoin.com/";
       String apiPath = "Balance/Balances";
       Date date = new Date();
        
		   HttpClient client = new DefaultHttpClient();		
		   HttpGet request = new HttpGet(baseAddress+apiPath);		
		   String message = "GET"+ baseAddress + apiPath + String.valueOf(date.getTime()/1000);
		   request.addHeader("API_PUBLIC_KEY", publicKey);
		   request.addHeader("API_REQUEST_SIGNATURE", CreateToken(message.toLowerCase(),secretKey));
		   request.addHeader("API_REQUEST_DATE", String.valueOf(date.getTime()/1000));
		   
		   HttpResponse response = client.execute(request);
		
		   BufferedReader rd = new BufferedReader (new InputStreamReader(response.getEntity().getContent()));
	
		   String line = "";
		   while ((line = rd.readLine()) != null) {
			 
			  System.out.println(line);		
			  }	
		
		  }
	 
	  private static String CreateToken(String message, String secretKey)
      {
		  String hash = "";
		  try {    

			     Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
			     SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), "HmacSHA256");
			     sha256_HMAC.init(secret_key);

			     hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));
			   
			    }
			    catch (Exception e){
			     System.out.println("Error");
			    }
		  return hash;
      }

	 
}
