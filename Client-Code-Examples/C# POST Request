API: POST Trade/Orders

// This example uses NewtonSoft.Json library to convert input order to Json string.

class MarketOrder
{
    public string Code { get; set; }
    public string Way { get; set; }
    public decimal Amount { get; set; }
    public decimal Price { get; set; }
}
    
 public void Execute()
  {
      MarketOrder order = new MarketOrder()
      {
          Code = "BTCUSD",
          Amount = 1,
          Way = "bid",
          Price = 100
      };

      string publicKey = "";
      string secretKey = "";
      string responseMessage = string.Empty;
      string unixdate = GetUnixDateNow();
      string baseAddress = "https://api.gatecoin.com/";
      string apiPath = "Trade/Orders";
      var request = (HttpWebRequest)WebRequest.Create(baseAddress + apiPath);
    
      request.Method = "POST";
      request.ContentType = "application/json";
      string jsonOrder = JsonConvert.SerializeObject(order);
      var data = Encoding.UTF8.GetBytes(jsonOrder);
      request.ContentLength = data.Length;
      string message = request.Method + baseAddress + apiPath + request.ContentType + unixdate;
     
      request.Headers["API_PUBLIC_KEY"] = publicKey;
      request.Headers["API_REQUEST_SIGNATURE"] = CreateToken(message.ToLower(), secretKey);
      request.Headers["API_REQUEST_DATE"] = unixdate;
      
      //post data
      using (var stream = request.GetRequestStream())
      {
          stream.Write(data, 0, data.Length);
      }
      //get response
      WebResponse response = request.GetResponse();
      // Get the stream containing content returned by the server.
      Stream dataStream = response.GetResponseStream();
      // Read the content.
      if (((HttpWebResponse)response).StatusDescription == "OK")
      {
          using (var stream = response.GetResponseStream())
          {
              StreamReader reader = new StreamReader(stream);
              responseMessage = reader.ReadToEnd();
            // Sample response: {"clOrderId":"BK11443774323","responseStatus":{"message":"OK"}}
          }
      }
  }

  private static string CreateToken(string message, string secretKey)
  {
      var encoding = new System.Text.ASCIIEncoding();
      byte[] keyByte = encoding.GetBytes(secretKey);
      byte[] messageBytes = encoding.GetBytes(message);
      using (var hmacsha256 = new System.Security.Cryptography.HMACSHA256(keyByte))
      {
          byte[] hashmessage = hmacsha256.ComputeHash(messageBytes);
          return Convert.ToBase64String(hashmessage);
      }
  }

  private static string GetUnixDateNow()
  {
      DateTime datetime = DateTime.UtcNow;
      DateTime sTime = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
      return ((decimal)(datetime - sTime).TotalSeconds).ToString();
  }
    
    
