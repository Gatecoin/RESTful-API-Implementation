import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Date;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.simple.JSONObject;

public class POST_Request {
 public static void main(String[] args) throws ClientProtocolException, IOException {
  
  String publicKey = "";
  String secretKey = "";
  String baseAddress = "https://www.gatecoin.com/api/";
  String apiPath = "Trade/Orders";  
  String contentType = "application/json";
  
  HttpClient client = new DefaultHttpClient();
  Date date = new Date();
  
  HttpPost request = new HttpPost(baseAddress+apiPath);
 
  //Add input parameters for the order and convert to JSON
  JSONObject json = new JSONObject();
  json.put("Code", "BTCUSD");
  json.put("Way", "bid");
  json.put("Price", 50);
  json.put("Amount", 1);
  StringEntity input = new StringEntity( json.toString()); 
  request.setEntity(input);

  String message = "POST"+ baseAddress + apiPath+ contentType + String.valueOf(date.getTime()/1000);
  request.addHeader("API_PUBLIC_KEY", publicKey);
  request.addHeader("API_REQUEST_SIGNATURE", CreateToken(message.toLowerCase(),secretKey));
  request.addHeader("API_REQUEST_DATE", String.valueOf(date.getTime()/1000));
  request.setHeader("Content-Type","application/json");

  HttpResponse response = client.execute(request);
  BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
  String line = "";
  while ((line = rd.readLine()) != null) {
   System.out.println(line);
  }
 }
 
 private static String CreateToken(String message, String secretKey)
 {
	  String hash = "";
	  try {    

		     Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
		     SecretKeySpec secret_key = new SecretKeySpec(secretKey.getBytes(), "HmacSHA256");
		     sha256_HMAC.init(secret_key);

		     hash = Base64.encodeBase64String(sha256_HMAC.doFinal(message.getBytes()));
		   
		    }
		    catch (Exception e){
		     System.out.println("Error");
		    }
	  return hash;
 }
}
